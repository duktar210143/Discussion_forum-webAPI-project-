{"ast":null,"code":"var _jsxFileName = \"/Users/duktartamang/disussionforum_proto/client/src/Components/Home/Pages/Dashboard/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport AppBar from \"../../../AppBar/AppBar\";\nimport SetUserQuestions from \"../Question/SetUserQuestions\";\n// import provider from profile image provider\nimport { ProfileImageProvider } from \"../../Providers/ProfileImageContext\";\n\n// import question state provider\nimport { QuestionStateProvider } from \"../../Providers/LatestQuestionContext\";\nimport GetProfile from \"../ProfileComponents/GetProfile\";\nimport SetProfile from \"../ProfileComponents/SetProfile\";\nimport GetUserQuestions from \"../Question/GetUserQuestions\";\nimport \"./Dashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  // State to track whether the question modal is currently open or closed\n  const [isQuestionsModalOpen, setIsQuestionsModalOpen] = useState(false);\n\n  // State to track whether the edit modal is currently open or closed\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [selectedQuestionId, setSelectedQuestionId] = useState(null);\n  const openQuestionModal = () => {\n    setIsQuestionsModalOpen(true);\n  };\n  const closeQuestionModal = () => {\n    setIsEditModalOpen(false);\n  };\n  const openEditModal = questionId => {\n    setIsEditModalOpen(true);\n    setSelectedQuestionId();\n  };\n  const closeEditModal = () => {\n    setIsQuestionsModalOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      openQuestionModal: openQuestionModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProfileImageProvider, {\n      children: [/*#__PURE__*/_jsxDEV(GetProfile, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SetProfile, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QuestionStateProvider, {\n      children: [/*#__PURE__*/_jsxDEV(SetUserQuestions, {\n        isOpen: isQuestionsModalOpen,\n        onClose: closeQuestionModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GetUserQuestions, {\n        openEditModal: openEditModal,\n        isEditOpen: isEditModalOpen,\n        onEditClose: closeEditModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"yU+SdTzSVVwqAKE6ePlcZCip0yI=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","AppBar","SetUserQuestions","ProfileImageProvider","QuestionStateProvider","GetProfile","SetProfile","GetUserQuestions","jsxDEV","_jsxDEV","Dashboard","_s","isQuestionsModalOpen","setIsQuestionsModalOpen","isEditModalOpen","setIsEditModalOpen","selectedQuestionId","setSelectedQuestionId","openQuestionModal","closeQuestionModal","openEditModal","questionId","closeEditModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","onClose","isEditOpen","onEditClose","_c","$RefreshReg$"],"sources":["/Users/duktartamang/disussionforum_proto/client/src/Components/Home/Pages/Dashboard/Dashboard.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport AppBar from \"../../../AppBar/AppBar\";\nimport SetUserQuestions from \"../Question/SetUserQuestions\";\n// import provider from profile image provider\nimport { ProfileImageProvider } from \"../../Providers/ProfileImageContext\";\n\n// import question state provider\nimport { QuestionStateProvider } from \"../../Providers/LatestQuestionContext\";\n\nimport GetProfile from \"../ProfileComponents/GetProfile\";\nimport SetProfile from \"../ProfileComponents/SetProfile\";\nimport GetUserQuestions from \"../Question/GetUserQuestions\";\nimport \"./Dashboard.css\";\n\nconst Dashboard = () => {\n  // State to track whether the question modal is currently open or closed\n  const [isQuestionsModalOpen, setIsQuestionsModalOpen] = useState(false);\n\n  // State to track whether the edit modal is currently open or closed\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n\n  const [selectedQuestionId, setSelectedQuestionId] = useState(null);\n\n  const openQuestionModal = () => {\n    setIsQuestionsModalOpen(true);\n  };\n\n  const closeQuestionModal = () => {\n    setIsEditModalOpen(false);\n  };\n\n  const openEditModal = (questionId) => {\n    setIsEditModalOpen(true);\n    setSelectedQuestionId()\n  };\n\n  const closeEditModal = () => {\n    setIsQuestionsModalOpen(false);\n  };\n\n  return (\n    <div className=\"dashboard-container\">\n      {/* // Render the AppBar component with a prop to open the question modal when a specific action is triggered */}\n      <AppBar openQuestionModal={openQuestionModal} />\n      <ProfileImageProvider>\n        <GetProfile />\n        <SetProfile />\n      </ProfileImageProvider>\n\n      {/* wrap the question components with providers to share state amongst components */}\n      <QuestionStateProvider>\n        {/* // Render the SetUserQuestions component with isOpen and onClose props\n// isOpen: Indicates whether the questions modal is open or closed\n// onClose: Callback function to close the questions modal*/}\n        <SetUserQuestions\n          isOpen={isQuestionsModalOpen}\n          onClose={closeQuestionModal}\n        />\n        {/* // Render the GetUserQuestions component with props to control whether the edit modal is open and to handle its closure */}\n        <GetUserQuestions \n        openEditModal = {openEditModal}\n        isEditOpen = {isEditModalOpen}\n         onEditClose={closeEditModal} />\n      </QuestionStateProvider>\n\n\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,gBAAgB,MAAM,8BAA8B;AAC3D;AACA,SAASC,oBAAoB,QAAQ,qCAAqC;;AAE1E;AACA,SAASC,qBAAqB,QAAQ,uCAAuC;AAE7E,OAAOC,UAAU,MAAM,iCAAiC;AACxD,OAAOC,UAAU,MAAM,iCAAiC;AACxD,OAAOC,gBAAgB,MAAM,8BAA8B;AAC3D,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB;EACA,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;;EAEvE;EACA,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAM,CAACgB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAElE,MAAMkB,iBAAiB,GAAGA,CAAA,KAAM;IAC9BL,uBAAuB,CAAC,IAAI,CAAC;EAC/B,CAAC;EAED,MAAMM,kBAAkB,GAAGA,CAAA,KAAM;IAC/BJ,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAMK,aAAa,GAAIC,UAAU,IAAK;IACpCN,kBAAkB,CAAC,IAAI,CAAC;IACxBE,qBAAqB,CAAC,CAAC;EACzB,CAAC;EAED,MAAMK,cAAc,GAAGA,CAAA,KAAM;IAC3BT,uBAAuB,CAAC,KAAK,CAAC;EAChC,CAAC;EAED,oBACEJ,OAAA;IAAKc,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAElCf,OAAA,CAACR,MAAM;MAACiB,iBAAiB,EAAEA;IAAkB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChDnB,OAAA,CAACN,oBAAoB;MAAAqB,QAAA,gBACnBf,OAAA,CAACJ,UAAU;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACdnB,OAAA,CAACH,UAAU;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACM,CAAC,eAGvBnB,OAAA,CAACL,qBAAqB;MAAAoB,QAAA,gBAIpBf,OAAA,CAACP,gBAAgB;QACf2B,MAAM,EAAEjB,oBAAqB;QAC7BkB,OAAO,EAAEX;MAAmB;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,eAEFnB,OAAA,CAACF,gBAAgB;QACjBa,aAAa,EAAIA,aAAc;QAC/BW,UAAU,EAAIjB,eAAgB;QAC7BkB,WAAW,EAAEV;MAAe;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGrB,CAAC;AAEV,CAAC;AAACjB,EAAA,CAtDID,SAAS;AAAAuB,EAAA,GAATvB,SAAS;AAwDf,eAAeA,SAAS;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}