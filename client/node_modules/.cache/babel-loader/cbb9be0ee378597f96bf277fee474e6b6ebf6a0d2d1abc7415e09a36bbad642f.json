{"ast":null,"code":"var _jsxFileName = \"/Users/duktartamang/disussionforum_proto/client/src/Components/Home/Pages/Question/GetUserQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./GetUserQuestions.css\";\n\n// import question state provider \nimport { RecentAddedQuestion } from \"../../Providers/LatestQuestionContext\";\nimport { Pencil } from \"lucide-react\";\nimport { Heart } from \"lucide-react\";\nimport { Reply } from \"lucide-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetUserQuestions = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    question,\n    setQuestion\n  } = RecentAddedQuestion();\n  const [isLoading, setIsLoading] = useState(true); // Track loading state\n\n  async function fetchUserSpecificQuestions() {\n    try {\n      // get token from client-side storage\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        navigate(\"/login\");\n        return;\n      }\n\n      // send a fetch request to the API endpoint for questions\n      const req = await fetch(\"http://localhost:1337/api/getQuestions\", {\n        method: \"GET\",\n        headers: {\n          \"x-access-token\": token\n        }\n      });\n      const data = await req.json();\n      if (data.status === \"ok\") {\n        setQuestion(data.questions);\n      } else {\n        alert(data.error);\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"An error occurred while fetching the questions.\");\n    } finally {\n      setIsLoading(false); // Mark loading as complete\n    }\n  }\n\n  useEffect(() => {\n    if (question) {\n      fetchUserSpecificQuestions();\n    }\n  }, [question]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ?\n    /*#__PURE__*/\n    // Loading state, you can show a spinner or message\n    _jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"question-list\",\n      children: question && question.length > 0 ? question.map(addedQuestion => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"question-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: addedQuestion.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"heart-button\",\n              children: /*#__PURE__*/_jsxDEV(Heart, {\n                strokeWidth: 1.5\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"edit-button\",\n              children: /*#__PURE__*/_jsxDEV(Pencil, {\n                strokeWidth: 1.5\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"reply-button\",\n              children: /*#__PURE__*/_jsxDEV(Reply, {\n                strokeWidth: 1.5\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"question-info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this)]\n      }, addedQuestion._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No questions found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(GetUserQuestions, \"mtX1nWo+XulyP1Szewhc3edUGt0=\", false, function () {\n  return [useNavigate];\n});\n_c = GetUserQuestions;\nexport default GetUserQuestions;\nvar _c;\n$RefreshReg$(_c, \"GetUserQuestions\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","RecentAddedQuestion","Pencil","Heart","Reply","jsxDEV","_jsxDEV","GetUserQuestions","_s","navigate","question","setQuestion","isLoading","setIsLoading","fetchUserSpecificQuestions","token","localStorage","getItem","req","fetch","method","headers","data","json","status","questions","alert","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","addedQuestion","strokeWidth","_id","_c","$RefreshReg$"],"sources":["/Users/duktartamang/disussionforum_proto/client/src/Components/Home/Pages/Question/GetUserQuestions.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./GetUserQuestions.css\";\n\n// import question state provider \nimport { RecentAddedQuestion } from \"../../Providers/LatestQuestionContext\";\n\nimport { Pencil } from \"lucide-react\";\nimport { Heart } from \"lucide-react\";\nimport { Reply } from \"lucide-react\";\n\nconst GetUserQuestions = () => {\n  const navigate = useNavigate();\n  const { question, setQuestion } = RecentAddedQuestion();\n  const [isLoading, setIsLoading] = useState(true); // Track loading state\n\n  async function fetchUserSpecificQuestions() {\n    try {\n      // get token from client-side storage\n      const token = localStorage.getItem(\"token\");\n\n      if (!token) {\n        navigate(\"/login\");\n        return;\n      }\n\n      // send a fetch request to the API endpoint for questions\n      const req = await fetch(\"http://localhost:1337/api/getQuestions\", {\n        method: \"GET\",\n        headers: {\n          \"x-access-token\": token,\n        },\n      });\n\n      const data = await req.json();\n\n      if (data.status === \"ok\") {\n        setQuestion(data.questions);\n      } else {\n        alert(data.error);\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"An error occurred while fetching the questions.\");\n    } finally {\n      setIsLoading(false); // Mark loading as complete\n    }\n  }\n\n  useEffect(() => {\n    if (question) {\n      fetchUserSpecificQuestions();\n    }\n  }, [question]);\n\n  return (\n    <div>\n      {isLoading ? (\n        // Loading state, you can show a spinner or message\n        <p>Loading...</p>\n      ) : (\n        <ul className=\"question-list\">\n          {question && question.length > 0 ? (\n            question.map((addedQuestion) => (\n              <li key={addedQuestion._id} className=\"question-item\">\n                <div className=\"question-header\">\n                  <h4>{addedQuestion.question}</h4>\n                  <div className=\"question-actions\">\n                    <button className=\"heart-button\">\n                      <Heart strokeWidth={1.5} />\n                    </button>\n                    <button className=\"edit-button\">\n                      <Pencil strokeWidth={1.5} />\n                    </button>\n                    <button className=\"reply-button\">\n                      <Reply strokeWidth={1.5} />\n                    </button>\n                  </div>\n                </div>\n                <p className=\"question-info\"></p>\n              </li>\n            ))\n          ) : (\n            <p>No questions found</p>\n          )}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default GetUserQuestions;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}